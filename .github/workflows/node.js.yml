# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - 'releases/**'
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

jobs:
  build:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        prefix: ['', 'zipkin', 'mock']

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Prefix Builder
        if: ${{ matrix.prefix != '' }}
        run: |
          bash "./plugins/${{ matrix.prefix }}/build.sh"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm run build --if-present
      - run: npm test
  coverage:
    needs: build
    runs-on: ubuntu-latest
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm run build --if-present
      - run: npm run coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  deploy:
    needs: coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        prefix: ['', 'mock', 'zipkin']

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prefix Builder
        if: ${{ matrix.prefix != '' }}
        run: |
          echo "prefix=-${{ matrix.prefix }}" >> $GITHUB_ENV
          echo "plugin=./plugins/${{ matrix.prefix }}" >> $GITHUB_ENV
          echo "path=./plugins/${{ matrix.prefix }}/Dockerfile" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            advtr/geolookup
          tags: |
            type=ref,event=branch,suffix=${{ env.prefix }}
            type=ref,event=pr,suffix=${{ env.prefix }}
            type=semver,pattern={{version}},suffix=${{ env.prefix }}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ env.prefix }}
            type=semver,pattern={{major}},suffix=${{ env.prefix }}
            type=raw,value=${{ matrix.prefix }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        if: github.event_name != 'pull_request'
        with:
          context: .
          file: ${{ env.path }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            DOCKER_TAG=${{ steps.meta.outputs.tags }}
            SOURCE_COMMIT=${{ github.sha }}
            SOURCE_BRANCH=${{ github.ref }}
            CI=github
            PLUGIN_PATH=${{env.plugin}}
